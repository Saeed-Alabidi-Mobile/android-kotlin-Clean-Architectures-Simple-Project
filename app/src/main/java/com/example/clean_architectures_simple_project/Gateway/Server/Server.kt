package com.example.clean_architectures_simple_project.Gateway.Server


import android.content.Context
import android.net.ConnectivityManager
import com.example.clean_architectures_simple_project.Domain.Core.API_CONST
import com.example.clean_architectures_simple_project.Entity.UserEntity
import com.jakewharton.retrofit2.adapter.kotlin.coroutines.CoroutineCallAdapterFactory
import kotlinx.coroutines.Deferred
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.async
import okhttp3.Interceptor
import okhttp3.OkHttpClient
import okhttp3.Response
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import retrofit2.http.GET
import retrofit2.http.Path
import java.io.IOException

//------------------------------------------------------------------------------
// <auto-generated>
//   name :saeed mohammed alabidi
//  Email:saeed1adm@gmail.com
//  Phone:00967-733122038
// </auto-generated>
//------------------------------------------------------------------------------

interface API {
    @GET("todos/{id}")
    fun getUserAsync(@Path("id") id: Int): Deferred<UserEntity>;

}


fun buildServerAsync(context: Context) = GlobalScope.async {
    Retrofit.Builder()
        .baseUrl(API_CONST.URL.Const)
        .addCallAdapterFactory(CoroutineCallAdapterFactory())
        .addConverterFactory(GsonConverterFactory.create())
        .client(okHttp(context, appKeyInterceptor()))
        .build()
        .create(API::class.java)

}

private fun okHttp(context: Context, appKeyInterceptor: Interceptor) =
    with(OkHttpClient.Builder()) {
        addInterceptor(appKeyInterceptor)
        addInterceptor(networkInterceptor(networkChecker(context)))
        build()
    }

private fun appKeyInterceptor() = Interceptor { chain ->
    val request = chain.request().newBuilder()
        .addHeader("X-P-T", API_CONST.X_P_T.Const)
        .build()
    chain.proceed(request);
}


private fun networkInterceptor(networkChecker: () -> Boolean) =
    object : ConnectivityInterceptor {
        override fun intercept(chain: Interceptor.Chain): Response {
            if (networkChecker())
                return chain.proceed(chain.request())
            throw  IOException("Please check your internet connection !");

        }
    }


private fun networkChecker(context: Context): () -> Boolean = {

    context.getSystemService(Context.CONNECTIVITY_SERVICE)
        ?.let { it as ConnectivityManager }
        ?.activeNetworkInfo
        ?.isConnected
        ?: false

}

private interface ConnectivityInterceptor : Interceptor

